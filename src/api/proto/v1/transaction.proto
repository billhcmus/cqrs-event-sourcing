syntax="proto3";
package acsys;
import "common.proto";

// Doi tuong tham gia vao mot transaction
// A chuyen tien cho B => A,B la participant
message Participant {
    // account id
    // REQUIRED
    string account_number = 1;

    // Loai hanh dong can thuc hien: cong tien, tru tien, dong bang tien
    // REQUIRED
    OperationType operation_type = 2;

    // Số tiền tác động lên acno này
    // REQUIRED
    int64 amount = 3;

    // Chú thích, mô tả
    // Ví dụ như lý do trừ tiền, cộng tiền,...
    // REQUIRED
    string memo = 4;

    // Thông tin của partner dùng để hiển thị
    // Ví dụ: giao dịch chuyển tiền từ A qua B, thì A.display_info = B.acno
    // REQUIRED
    string display_info = 5;
}

message TransactionResponse {
    string trans_no = 1;
    int32 trans_status = 2;
    string account_prove = 3;
}

// trans Process
message TransProcessRequest {
    // templateID yêu cầu ZAS thực hiện
    // các thông tin và thứ tự các participant tham gia trong transaction phải
    // khớp với template này 
    // REQUIRED
    int32 template_id = 1;

    // transaction number gốc
    // REQUIRED
    string trans_no = 2;

    // Thời gian thực hiện giao dịch
    // REQUIRED
    string timestamp = 3;

    // Dùng để xác định transaction này thuộc loại nào:
    // payment, transfer hay refund,...
    // REQUIRED
    int32 trans_type = 4;

    // Đối tượng tham gia transaction này
    // REQUIRED
    repeated Participant participants = 5;

    // Chú thích, mô tả
    // REQUIRED
    string memo = 6;

    // amount of order OR refund amount when refunded
    // REQUIRED
    int64 trans_amount = 7;
}

message TransProcessResponse {
    Status status = 1;
    TransactionResponse data = 2;
}

// transaction infomation
message Operation {
    OperationType operation_type = 1;
    int64 amount = 2;
    int32 subject = 3;
    int32 trans_type = 4;
    string memo = 5;
    string display_info = 6;
    string participant_trans_no = 7;
}

message AccountSubTrans {
    string account_number = 1;
    repeated Operation operations = 2;
    int32 sub_trans_no = 3;
}

message Transaction {
    string trans_no = 1;
    string global_trans_no = 2;
    string trade_time = 3;
    repeated AccountSubTrans account_sub_trans = 4;
}

// transQuery
message TransQueryRequest {
    // REQUIRED
    string trans_no = 1;
}

message TransQueryResponse {
    Status status = 1;
    TransactionResponse data = 2;
}