// Code generated by protoc-gen-go. DO NOT EDIT.
// source: api.proto

package pb

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"

import (
	context "golang.org/x/net/context"
	grpc "google.golang.org/grpc"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// Client API for EventStore service

type EventStoreClient interface {
	Save(ctx context.Context, in *SaveEventsRequest, opts ...grpc.CallOption) (*SaveEventsResponse, error)
	Load(ctx context.Context, in *LoadEventsRequest, opts ...grpc.CallOption) (*LoadEventsResponse, error)
}

type eventStoreClient struct {
	cc *grpc.ClientConn
}

func NewEventStoreClient(cc *grpc.ClientConn) EventStoreClient {
	return &eventStoreClient{cc}
}

func (c *eventStoreClient) Save(ctx context.Context, in *SaveEventsRequest, opts ...grpc.CallOption) (*SaveEventsResponse, error) {
	out := new(SaveEventsResponse)
	err := grpc.Invoke(ctx, "/pb.EventStore/Save", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *eventStoreClient) Load(ctx context.Context, in *LoadEventsRequest, opts ...grpc.CallOption) (*LoadEventsResponse, error) {
	out := new(LoadEventsResponse)
	err := grpc.Invoke(ctx, "/pb.EventStore/Load", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Server API for EventStore service

type EventStoreServer interface {
	Save(context.Context, *SaveEventsRequest) (*SaveEventsResponse, error)
	Load(context.Context, *LoadEventsRequest) (*LoadEventsResponse, error)
}

func RegisterEventStoreServer(s *grpc.Server, srv EventStoreServer) {
	s.RegisterService(&_EventStore_serviceDesc, srv)
}

func _EventStore_Save_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SaveEventsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(EventStoreServer).Save(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pb.EventStore/Save",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(EventStoreServer).Save(ctx, req.(*SaveEventsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _EventStore_Load_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(LoadEventsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(EventStoreServer).Load(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pb.EventStore/Load",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(EventStoreServer).Load(ctx, req.(*LoadEventsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _EventStore_serviceDesc = grpc.ServiceDesc{
	ServiceName: "pb.EventStore",
	HandlerType: (*EventStoreServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Save",
			Handler:    _EventStore_Save_Handler,
		},
		{
			MethodName: "Load",
			Handler:    _EventStore_Load_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "api.proto",
}

func init() { proto.RegisterFile("api.proto", fileDescriptor1) }

var fileDescriptor1 = []byte{
	// 119 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xe2, 0xe2, 0x4c, 0x2c, 0xc8, 0xd4,
	0x2b, 0x28, 0xca, 0x2f, 0xc9, 0x17, 0x62, 0x2a, 0x48, 0x92, 0xe2, 0x4e, 0x2d, 0x4b, 0xcd, 0x2b,
	0x81, 0x08, 0x18, 0xd5, 0x71, 0x71, 0xb9, 0x82, 0xb8, 0xc1, 0x25, 0xf9, 0x45, 0xa9, 0x42, 0xe6,
	0x5c, 0x2c, 0xc1, 0x89, 0x65, 0xa9, 0x42, 0xa2, 0x7a, 0x05, 0x49, 0x7a, 0x20, 0x16, 0x58, 0xae,
	0x38, 0x28, 0xb5, 0xb0, 0x34, 0xb5, 0xb8, 0x44, 0x4a, 0x0c, 0x5d, 0xb8, 0xb8, 0x20, 0x3f, 0xaf,
	0x38, 0x55, 0x89, 0x01, 0xa4, 0xd1, 0x27, 0x3f, 0x31, 0x05, 0xa2, 0x11, 0xc4, 0xc2, 0xa2, 0x11,
	0x59, 0x18, 0xa6, 0x31, 0x89, 0x0d, 0xec, 0x0c, 0x63, 0x40, 0x00, 0x00, 0x00, 0xff, 0xff, 0x99,
	0xc7, 0xa9, 0x33, 0xa4, 0x00, 0x00, 0x00,
}
